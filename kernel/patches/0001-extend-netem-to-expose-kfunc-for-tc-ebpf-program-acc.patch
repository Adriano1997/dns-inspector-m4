From 8e36c05f3ec5472c8439cecfc1e55fa9b633d70c Mon Sep 17 00:00:00 2001
From: Andrea Mayer <andrea.mayer@uniroma2.it>
Date: Sun, 9 Feb 2025 17:38:11 +0000
Subject: [PATCH] extend netem to expose kfunc for tc-ebpf program access to
 queue statistics

This commit introduces a significant enhancement to the netem queuing
discipline by exposing a new kernel function called bpf_netem_qstats_read.
This function enables tc-ebpf programs of type BPF_PROG_TYPE_SCHED_ACT to
access crucial netem queue statistics, including queue length and backlog.

Prior to this patch, tc-ebpf programs were unable to retrieve statistics
from netem directly, which posed a considerable limitation.
Without the ability to access real-time queue metrics, developers faced
challenges in creating complex simulation scenarios that consider queue
status when deciding about packet scheduling policies. This lack of
visibility into queue dynamics made it difficult for these programs to make
informed decisions about packet classification and management, ultimately
hindering their effectiveness.

The introduction of the bpf_netem_qstats_read function addresses this
limitation by allowing tc-ebpf programs to directly query the state of the
netem instance. By requiring the handler of the netem instance as an
argument, this new kfunc populates a shared data structure with the
relevant statistics upon successful invocation. If the operation is
successful, it returns 0, indicating that the statistics have been
retrieved correctly. On the other hand, if the provided handler does not
correspond to a valid netem instance, the function will return an error
code of less than zero.

Signed-off-by: Andrea Mayer <andrea.mayer@uniroma2.it>
---
 net/sched/sch_netem.c | 90 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 88 insertions(+), 2 deletions(-)

diff --git a/net/sched/sch_netem.c b/net/sched/sch_netem.c
index fa678eb88528..f3fb2bd25de9 100644
--- a/net/sched/sch_netem.c
+++ b/net/sched/sch_netem.c
@@ -26,7 +26,11 @@
 #include <net/pkt_sched.h>
 #include <net/inet_ecn.h>
 
-#define VERSION "1.3"
+#include <linux/bpf.h>
+#include <linux/btf.h>
+#include <linux/btf_ids.h>
+
+#define VERSION "1.4"
 
 /*	Network Emulation Queuing algorithm.
 	====================================
@@ -1294,11 +1298,93 @@ static struct Qdisc_ops netem_qdisc_ops __read_mostly = {
 	.owner		=	THIS_MODULE,
 };
 
+/* statistics provided to TC-eBPF programs */
+struct bpf_netem_qstats {
+	__u32 qlen;
+	__u32 backlog;
+};
+
+/* declare the kfunc prototype */
+__bpf_kfunc int bpf_netem_qstats_read(struct __sk_buff *skb, u32 handler,
+				      struct bpf_netem_qstats *qstats);
+
+static void bpf_netem_update_qstats(struct Qdisc *qdisc,
+				    struct bpf_netem_qstats *qstats)
+{
+	qdisc_qstats_qlen_backlog(qdisc, &qstats->qlen, &qstats->backlog);
+}
+
+/* begin kfunc definitions */
+__bpf_kfunc_start_defs();
+
+__bpf_kfunc int bpf_netem_qstats_read(struct __sk_buff *skb, u32 handler,
+				      struct bpf_netem_qstats *qstats)
+{
+	struct sk_buff *pskb = (struct sk_buff *)skb;
+	struct net_device *dev = pskb->dev;
+	const struct Qdisc_ops *ops;
+	struct Qdisc *sch;
+	int rc = 0;
+
+	rcu_read_lock();
+	sch = qdisc_lookup_rcu(dev, handler);
+	if (unlikely(!sch)) {
+		rc = -ENOENT;
+		goto out;
+	}
+
+	ops = sch->ops;
+	if (unlikely(ops != &netem_qdisc_ops)) {
+		/* at the moment we support only netem, so let's check if the
+		 * current qdisc is of netem kind.
+		 */
+		rc = -EOPNOTSUPP;
+		goto out;
+	}
+
+	/* update statistics */
+	bpf_netem_update_qstats(sch, qstats);
+out:
+	rcu_read_unlock();
+
+	return rc;
+}
+
+/* end kfunc defintions */
+__bpf_kfunc_end_defs();
+
+/* define the BTF kfunc set */
+BTF_SET8_START(bpf_kfunc_netem_set);
+BTF_ID_FLAGS(func, bpf_netem_qstats_read);
+BTF_SET8_END(bpf_kfunc_netem_set);
+
+static const struct btf_kfunc_id_set bpf_kfunc_netem_ids_set = {
+	.owner	= THIS_MODULE,
+	.set	= &bpf_kfunc_netem_set,
+};
 
 static int __init netem_module_init(void)
 {
+	int ret;
+
 	pr_info("netem: version " VERSION "\n");
-	return register_qdisc(&netem_qdisc_ops);
+
+	ret = register_qdisc(&netem_qdisc_ops);
+	if (ret) {
+		pr_err("netem: failed to register qdisc\n");
+		return ret;
+	}
+
+	ret = register_btf_kfunc_id_set(BPF_PROG_TYPE_SCHED_ACT,
+					&bpf_kfunc_netem_ids_set);
+	if (ret) {
+		pr_err("netem: failed to register BTF kfunc ID set\n");
+		unregister_qdisc(&netem_qdisc_ops);
+
+		return ret;
+	}
+
+	return 0;
 }
 static void __exit netem_module_exit(void)
 {
-- 
2.43.0

